# coding: utf-8

"""
    Fantasy Football Price Changes Api

    Get data on fantasy fottball price changes

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PriceChanges(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, club=None, status=None, percentage_owned=None, price=None, changes=None, delta=None, target=None):
        """
        PriceChanges - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'club': 'str',
            'status': 'str',
            'percentage_owned': 'str',
            'price': 'str',
            'changes': 'str',
            'delta': 'str',
            'target': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'club': 'club',
            'status': 'status',
            'percentage_owned': 'percentageOwned',
            'price': 'price',
            'changes': 'changes',
            'delta': 'delta',
            'target': 'target'
        }

        self._id = id
        self._name = name
        self._club = club
        self._status = status
        self._percentage_owned = percentage_owned
        self._price = price
        self._changes = changes
        self._delta = delta
        self._target = target

    @property
    def id(self):
        """
        Gets the id of this PriceChanges.
        Unique identifier representing a specific player

        :return: The id of this PriceChanges.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PriceChanges.
        Unique identifier representing a specific player

        :param id: The id of this PriceChanges.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this PriceChanges.
        Players Name

        :return: The name of this PriceChanges.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PriceChanges.
        Players Name

        :param name: The name of this PriceChanges.
        :type: str
        """

        self._name = name

    @property
    def club(self):
        """
        Gets the club of this PriceChanges.
        Name of players Club

        :return: The club of this PriceChanges.
        :rtype: str
        """
        return self._club

    @club.setter
    def club(self, club):
        """
        Sets the club of this PriceChanges.
        Name of players Club

        :param club: The club of this PriceChanges.
        :type: str
        """

        self._club = club

    @property
    def status(self):
        """
        Gets the status of this PriceChanges.
        Flag to show if a player is active for price changes

        :return: The status of this PriceChanges.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this PriceChanges.
        Flag to show if a player is active for price changes

        :param status: The status of this PriceChanges.
        :type: str
        """

        self._status = status

    @property
    def percentage_owned(self):
        """
        Gets the percentage_owned of this PriceChanges.
        Percentage of managers who own thsi player

        :return: The percentage_owned of this PriceChanges.
        :rtype: str
        """
        return self._percentage_owned

    @percentage_owned.setter
    def percentage_owned(self, percentage_owned):
        """
        Sets the percentage_owned of this PriceChanges.
        Percentage of managers who own thsi player

        :param percentage_owned: The percentage_owned of this PriceChanges.
        :type: str
        """

        self._percentage_owned = percentage_owned

    @property
    def price(self):
        """
        Gets the price of this PriceChanges.
        Prive of player

        :return: The price of this PriceChanges.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this PriceChanges.
        Prive of player

        :param price: The price of this PriceChanges.
        :type: str
        """

        self._price = price

    @property
    def changes(self):
        """
        Gets the changes of this PriceChanges.
        No of price changes this week

        :return: The changes of this PriceChanges.
        :rtype: str
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """
        Sets the changes of this PriceChanges.
        No of price changes this week

        :param changes: The changes of this PriceChanges.
        :type: str
        """

        self._changes = changes

    @property
    def delta(self):
        """
        Gets the delta of this PriceChanges.
        Number of transfers thsi week

        :return: The delta of this PriceChanges.
        :rtype: str
        """
        return self._delta

    @delta.setter
    def delta(self, delta):
        """
        Sets the delta of this PriceChanges.
        Number of transfers thsi week

        :param delta: The delta of this PriceChanges.
        :type: str
        """

        self._delta = delta

    @property
    def target(self):
        """
        Gets the target of this PriceChanges.
        Percentage of price rise target reached

        :return: The target of this PriceChanges.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """
        Sets the target of this PriceChanges.
        Percentage of price rise target reached

        :param target: The target of this PriceChanges.
        :type: str
        """

        self._target = target

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
